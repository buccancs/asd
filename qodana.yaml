version: "1.0"

#-------------------------------------------------------------------------------#
#        Qodana analysis is configured by the qodana.yaml file            #
#    https://www.jetbrains.com/help/qodana/qodana-yaml.html     #
#-------------------------------------------------------------------------------#

# Specify the inspection profile for code analysis.
# 'qodana.recommended' is the standard profile for a balance of inspections.
profile:
  name: qodana.recommended

# Specify the linter for a multi-language project.
# The JVM linter includes support for Kotlin, Java, and Python.
linter: jetbrains/qodana-jvm:2025.1

# (Optional) Force-enable specific inspections if they are not in the profile.
# Most of these are already included in 'qodana.recommended'.
include:
  - name: PythonUnreachableCode
  - name: PyUnusedLocal
  - name: PyPep8Naming
  - name: UnusedDeclaration
  - name: KotlinUnusedImport
  - name: GrazieInspection
  - name: SpellCheckingInspection
  - name: CheckDependencyLicenses
  - name: IncorrectPluginDslStructure
  - name: DeprecatedConfigurations
  - name: UnusedVersionCatalogEntry
  - name: BintrayPublishingPlugin
  - name: JCenterRepository
  - name: MultipleRepositoryUrls
  - name: ForeignDelegate
  - name: DependencyNotationArgument
  - name: InconsistentLineSeparators
  - name: IncorrectFormatting
  - name: JavaAnnotator
  - name: QodanaJavaSanity
  - name: QodanaKotlinSanity
  - name: ConfigurationAvoidance
  - name: ProblematicWhitespace
  - name: TodoComment
  - name: TodoComment
  - name: ReassignedToPlainText
  - name: RedundantSuppression
  - name: JsCoverageInspection
  - name: JvmLinesOfCodeInspection
  - name: checkReturnValue
  - name: ArgNamesErrorsInspection
  - name: AroundAdviceStyleInspection
  - name: DeclareParentsInspection
  - name: PointcutMethodStyleInspection
  - name: AopLanguageInspection
  - name: ArgNamesWarningsInspection
  - name: Annotator
  - name: InfixCallToOrdinary
  - name: RunBlocking
  - name: PackageName
  - name: ImplicitThis
  - name: FoldInitializerAndIfToElvis
  - name: AddOperatorModifier
  - name: UseExpressionBody
  - name: NullableBooleanElvis
  - name: ConvertSecondaryConstructorToPrimary
  - name: ReplaceCollectionCountWithSize
  - name: ReplacePrintlnWithLogging
  - name: PublicApiImplicitType
  - name: MavenCoroutinesDeprecation
  - name: GradleKotlinxCoroutinesDeprecation
  - name: MavenDuplicateDependenciesInspection
  - name: MavenDuplicatePluginInspection
  - name: MavenModelInspection
  - name: MavenParentMissedGroupIdArtifactIdInspection
  - name: MavenParentMissedVersionInspection
  - name: MavenRedundantGroupId
  - name: MavenPropertyInParent
  - name: CyclomaticComplexityInspection
  - name: HttpUrlsUsage
  - name: VulnerableLibrariesGlobal
  - name: OneButtonGroup
  - name: BoundFieldAssignment
  - name: DuplicateMnemonic
  - name: I18nForm
  - name: InvalidPropertyKeyForm
  - name: MissingMnemonic
  - name: NoLabelFor
  - name: NoButtonGroup
  - name: NoScrollPane
  - name: FormSpellChecking
  - name: IgnoreFileDuplicateEntry
  - name: YAMLSchemaDeprecation
  - name: YAMLDuplicatedKeys
  - name: YAMLRecursiveAlias
  - name: YAMLIncompatibleTypes
  - name: YAMLUnusedAnchor
  - name: YAMLUnresolvedAlias
  - name: YAMLSchemaValidation

# Exclude specific directories and files from the analysis.
exclude:
  - paths:
    # Common build output and dependency directories
    - build/
    - AndroidApp/build/
    - PythonApp/build/
    - .gradle/
    - node_modules/
    - .idea/
    # Python-specific exclusions
    - __pycache__/
    - venv/
    - env/
    - "**/*.pyc"

  # Example of how to disable an inspection entirely:
  # - name: SpellCheckingInspection
