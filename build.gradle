// Top-level build file where you can add configuration options common to all sub-projects/modules.

plugins {
    id 'com.android.application' version '8.3.2' apply false
    id 'com.android.library' version '8.3.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.9.23' apply false
    id 'com.google.devtools.ksp' version '1.9.23-1.0.20' apply false
    id 'com.google.dagger.hilt.android' version '2.48.1' apply false
}

// Milestone 5.1: Build Automation Tasks
// =================================

// Task to assemble all components (Android + Python tests)
task assembleAll {
    group = 'build'
    description = 'Builds Android APK and runs Python tests'
    
    dependsOn ':AndroidApp:assembleDebug'
    dependsOn 'pythonTest'
    
    doLast {
        println "✓ All components assembled successfully"
        println "  - Android APK: ${project(':AndroidApp').buildDir}/outputs/apk/debug/"
        println "  - Python tests completed"
    }
}

// Cross-platform Python executable detection
def getPythonExecutable() {
    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    def pythonExe = isWindows ? 'python.exe' : 'python'
    def scriptsDir = isWindows ? 'Scripts' : 'bin'
    
    // Check conda environment
    def condaEnvPath = System.getenv('CONDA_PREFIX')
    if (condaEnvPath) {
        def condaPython = file("${condaEnvPath}/${scriptsDir}/${pythonExe}")
        if (condaPython.exists()) {
            return condaPython.absolutePath
        }
    }
    
    // Check venv in project root
    def venvPython = file("venv/${scriptsDir}/${pythonExe}")
    if (venvPython.exists()) {
        return venvPython.absolutePath
    }
    
    // Check venv in PythonApp directory
    def pythonAppVenv = file("PythonApp/venv/${scriptsDir}/${pythonExe}")
    if (pythonAppVenv.exists()) {
        return pythonAppVenv.absolutePath
    }
    
    // Fall back to system python
    return isWindows ? 'python' : 'python3'
}

// Task to run Python tests via pytest
task pythonTest(type: Exec) {
    group = 'verification'
    description = 'Runs Python tests using pytest'
    
    workingDir file('PythonApp')
    
    def pythonExe = getPythonExecutable()
    commandLine pythonExe, '-m', 'pytest', 'tests/', '-v'
    
    // Ignore exit value to prevent build failure if tests don't exist yet
    ignoreExitValue = true
    
    doFirst {
        println "Running Python tests with: ${pythonExe}"
    }
    
    doLast {
        if (execResult.exitValue == 0) {
            println "✓ Python tests passed"
        } else {
            println "⚠ Python tests failed or not found (exit code: ${execResult.exitValue})"
        }
    }
}

// Task to set up Python environment (cross-platform)
task setupPythonEnv(type: Exec) {
    group = 'setup'
    description = 'Sets up Python environment (conda or venv)'
    
    workingDir file('.')
    
    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    
    // Try conda first, fall back to venv
    def condaCmd = isWindows ? 'conda.exe' : 'conda'
    def hasCondaEnv = file('environment.yml').exists()
    
    if (hasCondaEnv) {
        commandLine condaCmd, 'env', 'create', '-f', 'environment.yml', '--force'
    } else {
        // Fall back to venv + requirements.txt
        def pythonCmd = isWindows ? 'python' : 'python3'
        def venvScript = isWindows ? 'venv\\Scripts\\activate.bat' : 'venv/bin/activate'
        
        if (isWindows) {
            commandLine 'cmd', '/c', "${pythonCmd} -m venv venv && ${venvScript} && pip install -r requirements.txt"
        } else {
            commandLine 'bash', '-c', "${pythonCmd} -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
        }
    }
    
    ignoreExitValue = true
    
    doFirst {
        if (hasCondaEnv) {
            println "Setting up Python conda environment..."
        } else {
            println "Setting up Python venv environment..."
        }
    }
    
    doLast {
        if (execResult.exitValue == 0) {
            println "✓ Python environment created successfully"
        } else {
            println "⚠ Failed to create Python environment (exit code: ${execResult.exitValue})"
            println "  Try running the platform-specific setup script instead"
        }
    }
}

// Task to run code quality checks
task codeQuality {
    group = 'verification'
    description = 'Runs code quality checks for both Android and Python'
    
    dependsOn ':AndroidApp:lintDebug'
    dependsOn 'pythonLint'
    
    doLast {
        println "✓ Code quality checks completed"
    }
}

// Task to run Python linting (cross-platform)
task pythonLint(type: Exec) {
    group = 'verification'
    description = 'Runs Python linting with flake8'
    
    workingDir file('PythonApp')
    
    def pythonExe = getPythonExecutable()
    commandLine pythonExe, '-m', 'flake8', 'src/', '--max-line-length=88'
    
    ignoreExitValue = true
    
    doFirst {
        println "Running Python linting with: ${pythonExe}"
    }
    
    doLast {
        if (execResult.exitValue == 0) {
            println "✓ Python linting passed"
        } else {
            println "⚠ Python linting issues found (exit code: ${execResult.exitValue})"
        }
    }
}

// Task to build release versions
task buildRelease {
    group = 'build'
    description = 'Builds release versions of all components'
    
    dependsOn ':AndroidApp:assembleRelease'
    dependsOn 'pythonPackage'
    
    doLast {
        println "✓ Release build completed"
    }
}

// Task to package Python application (cross-platform)
task pythonPackage(type: Exec) {
    group = 'build'
    description = 'Packages Python application using PyInstaller'
    
    workingDir file('PythonApp')
    
    def pythonExe = getPythonExecutable()
    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    def additionalArgs = isWindows ? ['--windowed'] : []
    
    commandLine([pythonExe, '-m', 'PyInstaller', 'src/main.py', '--onefile'] + additionalArgs)
    
    ignoreExitValue = true
    
    doFirst {
        println "Packaging Python application with: ${pythonExe}"
    }
    
    doLast {
        if (execResult.exitValue == 0) {
            println "✓ Python application packaged successfully"
            def distDir = file("PythonApp/dist")
            if (distDir.exists()) {
                println "  Executable location: ${distDir.absolutePath}"
            }
        } else {
            println "⚠ Python packaging failed (exit code: ${execResult.exitValue})"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
