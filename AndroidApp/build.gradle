plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'dagger.hilt.android.plugin'
    id 'io.gitlab.arturbosch.detekt' version '1.23.4'
}

android {
    namespace 'com.multisensor.recording'
    compileSdk 35

    defaultConfig {
        applicationId "com.multisensor.recording"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.multisensor.recording.CustomTestRunner"

        // NDK configuration for 16 KB page size compatibility
        ndk {
            // Ensure native libraries are built with proper alignment for 16 KB page sizes
            // This addresses the LOAD segments alignment issue for Google Play compliance
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    packaging {
        resources {
            pickFirsts += "META-INF/LICENSE.md"
            pickFirsts += "META-INF/LICENSE-notice.md"
            // Exclude duplicate kotlinx-coroutines-core files
            excludes += "META-INF/kotlinx-coroutines-core.kotlin_module"
            // You can also exclude other common conflicting files
            // pickFirsts += "META-INF/NOTICE.md"
            // pickFirsts += "META-INF/DEPENDENCIES"
        }

        // 16 KB page size compatibility for native libraries
        jniLibs {
            // Ensure native libraries are properly aligned for 16 KB page sizes
            // This is required for Google Play compliance starting November 1st, 2025
            useLegacyPackaging = false
            // Keep native libraries compressed to ensure proper alignment
            keepDebugSymbols += "**/*.so"
            // Handle duplicate native libraries from different USB camera SDKs
            pickFirsts += "lib/arm64-v8a/libUSBUVCCamera.so"
            pickFirsts += "lib/armeabi-v7a/libUSBUVCCamera.so"
            pickFirsts += "lib/x86/libUSBUVCCamera.so"
            pickFirsts += "lib/x86_64/libUSBUVCCamera.so"
            pickFirsts += "lib/arm64-v8a/libencrypt.so"
            pickFirsts += "lib/armeabi-v7a/libencrypt.so"
            pickFirsts += "lib/x86/libencrypt.so"
            pickFirsts += "lib/x86_64/libencrypt.so"
            pickFirsts += "lib/arm64-v8a/libusbcamera.so"
            pickFirsts += "lib/armeabi-v7a/libusbcamera.so"
            pickFirsts += "lib/x86/libusbcamera.so"
            pickFirsts += "lib/x86_64/libusbcamera.so"
            pickFirsts += "lib/arm64-v8a/libircmd.so"
            pickFirsts += "lib/armeabi-v7a/libircmd.so"
            pickFirsts += "lib/x86/libircmd.so"
            pickFirsts += "lib/x86_64/libircmd.so"
            pickFirsts += "lib/arm64-v8a/libirparse.so"
            pickFirsts += "lib/armeabi-v7a/libirparse.so"
            pickFirsts += "lib/x86/libirparse.so"
            pickFirsts += "lib/x86_64/libirparse.so"
            pickFirsts += "lib/arm64-v8a/libirprocess.so"
            pickFirsts += "lib/armeabi-v7a/libirprocess.so"
            pickFirsts += "lib/x86/libirprocess.so"
            pickFirsts += "lib/x86_64/libirprocess.so"
            pickFirsts += "lib/arm64-v8a/libirtemp.so"
            pickFirsts += "lib/armeabi-v7a/libirtemp.so"
            pickFirsts += "lib/x86/libirtemp.so"
            pickFirsts += "lib/x86_64/libirtemp.so"
            pickFirsts += "lib/arm64-v8a/libomp.so"
            pickFirsts += "lib/armeabi-v7a/libomp.so"
            pickFirsts += "lib/x86/libomp.so"
            pickFirsts += "lib/x86_64/libomp.so"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            buildConfigField "String", "BUILD_TYPE", '"debug"'
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BUILD_TYPE", '"release"'
        }

        staging {
            initWith debug
            debuggable false
            buildConfigField "String", "BUILD_TYPE", '"staging"'
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }

    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            buildConfigField "String", "ENVIRONMENT", '"development"'
        }

        prod {
            dimension "environment"
            buildConfigField "String", "ENVIRONMENT", '"production"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            '-opt-in=kotlin.RequiresOptIn',
            '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
            '-opt-in=kotlin.time.ExperimentalTime',
            '-opt-in=kotlin.ExperimentalStdlibApi',
            '-Xjsr305=strict'
        ]
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    // Additional build options for 16 KB page size compatibility
    buildTypes.configureEach {
        // Ensure native libraries are built with proper alignment
        // This helps address LOAD segment alignment issues for 16 KB page sizes
        ndk {
            debugSymbolLevel 'SYMBOL_TABLE'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                // Enhanced Windows compatibility configuration
                // JVM arguments for module access and headless operation
                jvmArgs '-Djava.awt.headless=true',
                        '-Dfile.encoding=UTF-8',
                        '-Duser.timezone=UTC',
                        '-Djava.security.manager=allow',
                        '--add-opens=java.base/java.lang=ALL-UNNAMED',
                        '--add-opens=java.base/java.util=ALL-UNNAMED',
                        '--add-opens=java.base/java.io=ALL-UNNAMED',
                        '--add-opens=java.base/java.nio.file=ALL-UNNAMED',
                        '--add-opens=java.base/java.nio.file.attribute=ALL-UNNAMED',
                        '--add-opens=java.base/java.nio.file.spi=ALL-UNNAMED',
                        '--add-opens=java.base/sun.nio.fs=ALL-UNNAMED'

                // Robolectric configuration for Windows compatibility
                systemProperty 'java.io.tmpdir', System.getProperty('java.io.tmpdir')
                systemProperty 'robolectric.logging.enabled', 'true'
                systemProperty 'robolectric.offline', 'false'
                systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
                systemProperty 'robolectric.dependency.repo.id', 'central'
                systemProperty 'robolectric.useWindowsCompatibleTempDir', 'true'

                // Windows POSIX permissions compatibility
                // These properties help resolve the Google Guava Files.createTempDir() POSIX permissions issue
                systemProperty 'java.nio.file.spi.DefaultFileSystemProvider', 'sun.nio.fs.WindowsFileSystemProvider'
                systemProperty 'java.nio.file.spi.FileSystemProvider.installedProviders', 'sun.nio.fs.WindowsFileSystemProvider'
                systemProperty 'sun.nio.fs.useCanonicalPrefixCache', 'false'
                systemProperty 'sun.nio.fs.useCanonicalCache', 'false'
                systemProperty 'com.google.common.io.Files.createTempDir.avoidPosix', 'true'
                
                // Enhanced test reporting
                finalizedBy jacocoTestReport
            }
        }
        
        // Android instrumented test configuration  
        managedDevices {
            devices {
                pixel2api30(com.android.build.api.dsl.ManagedVirtualDevice) {
                    device = "Pixel 2"
                    apiLevel = 30
                    systemImageSource = "aosp"
                }
            }
        }
        
        // Test execution options
        execution = "ANDROIDX_TEST_ORCHESTRATOR"
        animationsDisabled = true
    }
}

// Configuration for enhanced linting and code quality
configurations {
    ktlint
}

// Gradle task to generate Kotlin constants from shared config.json
import groovy.json.JsonSlurper

def configFile = file("src/main/assets/config.json")
def outputDir = file("$buildDir/generated/source/config")
def outputFile = file("$outputDir/com/multisensor/recording/config/CommonConstants.kt")

task generateConstants {
    inputs.file configFile
    outputs.file outputFile

    doLast {
        def json = new JsonSlurper().parse(configFile)
        outputDir.mkdirs()

        def kotlinCode = new StringBuilder()
        kotlinCode.append("// Auto-generated from config.json. Do not edit manually.\n")
        kotlinCode.append("package com.multisensor.recording.config\n\n")
        kotlinCode.append("object CommonConstants {\n")

        // Protocol version
        kotlinCode.append("    const val PROTOCOL_VERSION: Int = ${json.protocol_version}\n")
        kotlinCode.append("    const val APP_VERSION: String = \"${json.version}\"\n\n")

        // Network constants
        kotlinCode.append("    object Network {\n")
        kotlinCode.append("        const val HOST: String = \"${json.network.host}\"\n")
        kotlinCode.append("        const val PORT: Int = ${json.network.port}\n")
        kotlinCode.append("        const val TIMEOUT_SECONDS: Int = ${json.network.timeout_seconds}\n")
        kotlinCode.append("        const val BUFFER_SIZE: Int = ${json.network.buffer_size}\n")
        kotlinCode.append("        const val MAX_CONNECTIONS: Int = ${json.network.max_connections}\n")
        kotlinCode.append("        const val HEARTBEAT_INTERVAL: Int = ${json.network.heartbeat_interval}\n")
        kotlinCode.append("        const val RECONNECT_ATTEMPTS: Int = ${json.network.reconnect_attempts}\n")
        kotlinCode.append("    }\n\n")

        // Device constants
        kotlinCode.append("    object Devices {\n")
        kotlinCode.append("        const val CAMERA_ID: Int = ${json.devices.camera_id}\n")
        kotlinCode.append("        const val FRAME_RATE: Int = ${json.devices.frame_rate}\n")
        kotlinCode.append("        const val RESOLUTION_WIDTH: Int = ${json.devices.resolution.width}\n")
        kotlinCode.append("        const val RESOLUTION_HEIGHT: Int = ${json.devices.resolution.height}\n")
        kotlinCode.append("        const val PREVIEW_WIDTH: Int = ${json.devices.preview_resolution.width}\n")
        kotlinCode.append("        const val PREVIEW_HEIGHT: Int = ${json.devices.preview_resolution.height}\n")
        kotlinCode.append("        const val MIC_SAMPLE_RATE: Int = ${json.devices.mic_sample_rate}\n")
        kotlinCode.append("        const val MIC_CHANNELS: Int = ${json.devices.mic_channels}\n")
        kotlinCode.append("        const val CHUNK_SIZE: Int = ${json.devices.chunk_size}\n")
        kotlinCode.append("    }\n\n")

        // Calibration constants
        kotlinCode.append("    object Calibration {\n")
        kotlinCode.append("        const val PATTERN_TYPE: String = \"${json.calibration.pattern_type}\"\n")
        kotlinCode.append("        const val PATTERN_ROWS: Int = ${json.calibration.pattern_rows}\n")
        kotlinCode.append("        const val PATTERN_COLS: Int = ${json.calibration.pattern_cols}\n")
        kotlinCode.append("        const val SQUARE_SIZE_M: Double = ${json.calibration.square_size_m}\n")
        kotlinCode.append("        const val ERROR_THRESHOLD: Double = ${json.calibration.error_threshold}\n")
        kotlinCode.append("        const val MIN_IMAGES: Int = ${json.calibration.min_images}\n")
        kotlinCode.append("        const val MAX_IMAGES: Int = ${json.calibration.max_images}\n")
        kotlinCode.append("    }\n")

        kotlinCode.append("}\n")

        outputFile.text = kotlinCode.toString()
        println("Generated CommonConstants.kt from config.json")
    }
}

// Wire the task into the build process
android.sourceSets.main.java.srcDir outputDir
preBuild.dependsOn generateConstants

dependencies {
    // Core & UI Components
    implementation libs.bundles.core.ui

    // Settings and Preferences - Milestone 2.7 UI Enhancement
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // Material Design Components - UI Modernization
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    // Jetpack Navigation Component - Modern Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.6'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.6'

    // Architecture - Lifecycle, Coroutines, Permissions
    implementation libs.bundles.lifecycle
    implementation libs.kotlinx.coroutines.android
    implementation libs.bundles.activity.fragment

    // Enhanced Permission Handling
    implementation libs.xxpermissions

    // CameraX
    implementation libs.bundles.camera

    // Dependency Injection
    implementation libs.hilt.android
    ksp libs.hilt.compiler

    // Room Database - Phase 3 State Persistence
    implementation libs.bundles.room
    ksp libs.room.compiler

    // Networking & Serialization
    implementation libs.bundles.networking

    // Unit Testing
    testImplementation libs.bundles.unit.testing

    // Hilt Testing
    testImplementation libs.hilt.android.testing
    kspTest libs.hilt.compiler

    // Android (Instrumented) Testing
    androidTestImplementation libs.bundles.integration.testing
    
    // Test orchestrator for reliable instrumented tests
    androidTestUtil 'androidx.test:orchestrator:1.4.2'

    // Hilt Integration Testing
    androidTestImplementation libs.hilt.android.testing
    kspAndroidTest libs.hilt.compiler

    // Code quality and linting tools
    ktlint 'com.pinterest:ktlint:0.50.0'
    detektPlugins 'io.gitlab.arturbosch.detekt:detekt-formatting:1.23.4'

    // Shimmer SDK dependencies
    implementation files('src/main/libs/shimmerandroidinstrumentdriver-3.2.3_beta.aar')
    implementation files('src/main//libs/shimmerbluetoothmanager-0.11.4_beta.jar')
    implementation files('src/main/libs/shimmerdriver-0.11.4_beta.jar')
    implementation files('src/main/libs/shimmerdriverpc-0.11.4_beta.jar')

    // Topdon thermal camera SDK dependencies
    implementation files('src/main/libs/topdon_1.3.7.aar')
    implementation files('src/main/libs/libusbdualsdk_1.3.4_2406271906_standard.aar')
    implementation files('src/main/libs/opengl_1.3.2_standard.aar')
    implementation files('src/main/libs/suplib-release.aar')
}

// Detekt configuration for Kotlin static analysis
detekt {
    buildUponDefaultConfig = true
    allRules = false
    config = files("$projectDir/../detekt.yml")
    baseline = file("$projectDir/detekt-baseline.xml")
    
    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = true
        sarif.enabled = true
        md.enabled = false
    }
}

// JaCoCo configuration for enhanced coverage reporting
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.11"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDevDebugUnitTest', 'createDevDebugCoverageReport']) {
    group = "Reporting"
    description = "Generates Jacoco coverage reports."
    
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/databinding/*',
        '**/generated/**/*.*',
        '**/*_Factory.*',
        '**/*_MembersInjector.*',
        '**/*Fragment.*',
        '**/*Activity.*'
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
    
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
        "jacoco/testDevDebugUnitTest.exec",
        "outputs/code_coverage/devDebugAndroidTest/connected/**/*.ec"
    ]))

    sourceDirectories.setFrom(files([
        "$project.projectDir/src/main/java",
        "$project.projectDir/src/main/kotlin",
        "$project.projectDir/src/debug/java",
        "$project.projectDir/src/debug/kotlin"
    ]))
}

// Custom tasks for enhanced development workflow
task formatKotlin(type: JavaExec, group: "formatting") {
    description = "Format Kotlin code with ktlint"
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

task lintKotlin(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style with ktlint"
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}

// Integration with enhanced build process
tasks.named("check").configure {
    dependsOn("detekt")
    dependsOn("lintKotlin") 
}

tasks.named("build").configure {
    finalizedBy("jacocoTestReport")
}