# Automated Dependency Management and Security Updates
# Monitors and updates dependencies across Android and Python components

name: Dependency Management

on:
  schedule:
    # Run weekly on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - 'gradle/libs.versions.toml'
      - 'environment.yml' 
      - 'test-requirements.txt'
      - 'pyproject.toml'

env:
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.9'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python security tools
      run: |
        pip install --upgrade pip
        pip install safety pip-audit osv-scanner
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      
    - name: Gradle dependency vulnerability scan
      run: |
        chmod +x gradlew
        ./gradlew dependencyCheckAnalyze --info || echo "Gradle dependency check completed"
        
    - name: Python dependency vulnerability scan
      run: |
        echo "Running Python dependency security scans..."
        
        # Safety check for known vulnerabilities
        safety check --json --output safety-report.json || echo "Safety scan completed"
        
        # pip-audit for comprehensive scanning
        pip-audit --desc --format=json --output=pip-audit-report.json || echo "pip-audit scan completed"
        
        # OSV scanner for additional coverage
        if command -v osv-scanner &> /dev/null; then
          osv-scanner --format json --output osv-report.json . || echo "OSV scan completed"
        fi
        
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json
          osv-report.json
          build/reports/
        retention-days: 30

  # Android dependency updates check
  android-dependency-check:
    name: Android Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      
    - name: Check for Android dependency updates
      run: |
        chmod +x gradlew
        ./gradlew dependencyUpdates --info > dependency-updates-android.txt || echo "Dependency update check completed"
        
    - name: Generate Android dependency report
      run: |
        echo "# Android Dependency Update Report" > android-dependencies.md
        echo "Generated on: $(date)" >> android-dependencies.md
        echo "" >> android-dependencies.md
        echo "## Available Updates" >> android-dependencies.md
        
        if [ -f dependency-updates-android.txt ]; then
          grep -A 50 "The following dependencies have later milestone versions:" dependency-updates-android.txt >> android-dependencies.md || echo "No updates found"
        fi
        
    - name: Upload Android dependency report
      uses: actions/upload-artifact@v3
      with:
        name: android-dependency-report
        path: |
          dependency-updates-android.txt
          android-dependencies.md
        retention-days: 14

  # Python dependency updates check  
  python-dependency-check:
    name: Python Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependency management tools
      run: |
        pip install --upgrade pip
        pip install pip-tools pur conda-forge-pinning-feedstock
        
    - name: Check for Python dependency updates
      run: |
        echo "Checking for Python dependency updates..."
        
        # Check conda environment updates
        if [ -f environment.yml ]; then
          echo "# Conda Environment Update Check" > python-dependencies.md
          echo "Generated on: $(date)" >> python-dependencies.md
          echo "" >> python-dependencies.md
          echo "## Current Environment" >> python-dependencies.md
          echo "\`\`\`yaml" >> python-dependencies.md
          cat environment.yml >> python-dependencies.md
          echo "\`\`\`" >> python-dependencies.md
        fi
        
        # Check pip requirements updates
        if [ -f test-requirements.txt ]; then
          echo "" >> python-dependencies.md
          echo "## Test Requirements Updates" >> python-dependencies.md
          pur -r test-requirements.txt --dry-run > test-requirements-updates.txt || echo "No updates available"
          if [ -s test-requirements-updates.txt ]; then
            echo "\`\`\`" >> python-dependencies.md
            cat test-requirements-updates.txt >> python-dependencies.md
            echo "\`\`\`" >> python-dependencies.md
          else
            echo "No updates available for test requirements." >> python-dependencies.md
          fi
        fi
        
    - name: Upload Python dependency report
      uses: actions/upload-artifact@v3
      with:
        name: python-dependency-report
        path: |
          python-dependencies.md
          test-requirements-updates.txt
        retention-days: 14

  # License compliance check
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install license checking tools
      run: |
        pip install --upgrade pip
        pip install pip-licenses licensecheck
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      
    - name: Check Android licenses
      run: |
        chmod +x gradlew
        echo "Checking Android dependency licenses..."
        ./gradlew generateLicenseReport --info || echo "License report generation completed"
        
    - name: Check Python licenses
      run: |
        echo "Checking Python dependency licenses..."
        pip-licenses --format=json --output-file=python-licenses.json || echo "Python license check completed"
        pip-licenses --format=markdown --output-file=python-licenses.md || echo "Python license markdown generated"
        
    - name: Generate license compliance report
      run: |
        echo "# License Compliance Report" > license-compliance.md
        echo "Generated on: $(date)" >> license-compliance.md
        echo "" >> license-compliance.md
        
        echo "## Python Dependencies" >> license-compliance.md
        if [ -f python-licenses.md ]; then
          cat python-licenses.md >> license-compliance.md
        fi
        
        echo "" >> license-compliance.md
        echo "## Android Dependencies" >> license-compliance.md
        echo "See build/reports/license/ for detailed Android license information" >> license-compliance.md
        
    - name: Upload license compliance report
      uses: actions/upload-artifact@v3
      with:
        name: license-compliance-report
        path: |
          license-compliance.md
          python-licenses.json
          python-licenses.md
          build/reports/license/
        retention-days: 30

  # Consolidate and create summary issue
  dependency-summary:
    name: Create Dependency Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, android-dependency-check, python-dependency-check, license-compliance]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      issues: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all dependency reports
      uses: actions/download-artifact@v3
      with:
        path: dependency-reports/
        
    - name: Generate consolidated summary
      run: |
        echo "# Weekly Dependency Management Summary" > dependency-summary.md
        echo "Generated on: $(date)" >> dependency-summary.md
        echo "Commit: ${{ github.sha }}" >> dependency-summary.md
        echo "" >> dependency-summary.md
        
        echo "## 🔍 Security Scan Results" >> dependency-summary.md
        echo "- Vulnerability scans completed for both Android and Python dependencies" >> dependency-summary.md
        echo "- Check artifacts for detailed security reports" >> dependency-summary.md
        echo "" >> dependency-summary.md
        
        echo "## 📦 Available Updates" >> dependency-summary.md
        echo "### Android Dependencies" >> dependency-summary.md
        if [ -f dependency-reports/android-dependency-report/android-dependencies.md ]; then
          tail -n +4 dependency-reports/android-dependency-report/android-dependencies.md >> dependency-summary.md
        else
          echo "- No Android dependency report available" >> dependency-summary.md
        fi
        
        echo "" >> dependency-summary.md
        echo "### Python Dependencies" >> dependency-summary.md
        if [ -f dependency-reports/python-dependency-report/python-dependencies.md ]; then
          tail -n +4 dependency-reports/python-dependency-report/python-dependencies.md >> dependency-summary.md
        else
          echo "- No Python dependency report available" >> dependency-summary.md
        fi
        
        echo "" >> dependency-summary.md
        echo "## ⚖️ License Compliance" >> dependency-summary.md
        echo "- License compliance check completed" >> dependency-summary.md
        echo "- Review artifacts for detailed license information" >> dependency-summary.md
        
        echo "" >> dependency-summary.md
        echo "## 🚀 Recommended Actions" >> dependency-summary.md
        echo "1. Review security scan results and address any high/critical vulnerabilities" >> dependency-summary.md
        echo "2. Evaluate available dependency updates for stability and security improvements" >> dependency-summary.md
        echo "3. Ensure all dependencies comply with project license requirements" >> dependency-summary.md
        echo "4. Update dependencies in a controlled manner with proper testing" >> dependency-summary.md
        
    - name: Create or update dependency tracking issue
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('dependency-summary.md', 'utf8');
          
          const title = `Weekly Dependency Management Report - ${new Date().toISOString().split('T')[0]}`;
          
          // Look for existing dependency tracking issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['dependencies', 'security'],
            state: 'open'
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('Weekly Dependency Management Report')
          );
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              title: title,
              body: summary
            });
            console.log(`Updated existing issue #${existingIssue.number}`);
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: summary,
              labels: ['dependencies', 'security', 'maintenance']
            });
            console.log('Created new dependency tracking issue');
          }
          
    - name: Upload consolidated summary
      uses: actions/upload-artifact@v3
      with:
        name: dependency-management-summary
        path: dependency-summary.md
        retention-days: 90
