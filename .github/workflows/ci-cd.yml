# Milestone 5.2: Enhanced CI/CD Pipeline
# ========================================
# Multi-platform CI/CD with conda environments, path filters, and quality gates

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.9'
  CONDA_ENV_NAME: 'thermal-env'

jobs:
  # Path-based job filtering for optimization
  changes:
    runs-on: ubuntu-latest
    outputs:
      android: ${{ steps.changes.outputs.android }}
      python: ${{ steps.changes.outputs.python }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            android:
              - 'AndroidApp/**'
              - 'build.gradle'
              - 'settings.gradle'
              - 'gradle/**'
            python:
              - 'PythonApp/**'
              - 'environment.yml'
              - 'build.gradle'
            docs:
              - 'docs/**'
              - 'README.md'

  # Android Build and Test Job (Milestone 5.2)
  android-build-test:
    name: Android Build & Test
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.android == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
      
    - name: Build Android project (using Milestone 5.1 tasks)
      run: ./gradlew AndroidApp:assembleDebug --stacktrace
      
    - name: Run Android unit tests for all variants
      run: |
        echo "Running comprehensive unit tests for all Android variants..."
        ./gradlew AndroidApp:test --stacktrace
        echo "Running specific variant tests for coverage..."
        ./gradlew AndroidApp:testDevDebugUnitTest --stacktrace
        ./gradlew AndroidApp:testProdDebugUnitTest --stacktrace
      
    - name: Run Android lint
      run: ./gradlew AndroidApp:lintDebug --stacktrace
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Android Unit Tests - All Variants
        path: AndroidApp/build/test-results/**/TEST-*.xml
        reporter: java-junit
        
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: android-build-artifacts
        path: |
          AndroidApp/build/outputs/apk/debug/*.apk
          AndroidApp/build/reports/
        retention-days: 7

  # Android Integration Test Job
  android-integration-test:
    name: Android Integration Tests
    runs-on: macos-latest
    needs: android-build-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run Android instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: default
        arch: x86_64
        profile: Nexus 6
        script: ./gradlew AndroidApp:connectedDebugAndroidTest --stacktrace
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: android-integration-test-results
        path: AndroidApp/build/reports/androidTests/connected/
        retention-days: 7

  # Python Build and Test Job (Milestone 5.2 - Conda-based)
  python-build-test:
    name: Python Build & Test (Conda)
    runs-on: ${{ matrix.os }}
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            conda-env-file: environment.yml
          - os: ubuntu-latest
            conda-env-file: environment.yml
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        environment-file: ${{ matrix.conda-env-file }}
        activate-environment: ${{ env.CONDA_ENV_NAME }}
        
    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ~/conda_pkgs_dir
          ~/.conda/envs/${{ env.CONDA_ENV_NAME }}
        key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-
        
    - name: Set up JDK ${{ env.JAVA_VERSION }} (for Gradle integration)
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew (Unix)
      if: runner.os != 'Windows'
      run: chmod +x gradlew
      
    - name: Verify conda environment
      shell: bash -l {0}
      run: |
        conda info
        conda list
        python --version
        which python
        
    - name: Install test dependencies
      shell: bash -l {0}
      run: |
        pip install -r test-requirements.txt

    - name: Run Python tests with pytest
      shell: bash -l {0}
      run: |
        cd PythonApp
        python -m pytest --cov=src --cov-report=html --cov-report=xml

    - name: Run Python tests (Milestone 5.1 Gradle task)
      shell: bash -l {0}
      run: |
        echo "Running all Python tests with coverage..."
        ./gradlew PythonApp:runPythonTestsWithCoverage --stacktrace
        echo "Running Python setup validation..."
        ./gradlew PythonApp:testPythonSetup --stacktrace
        echo "Running Gradle Python test integration..."
        ./gradlew pythonTest --stacktrace

    - name: Run Python linting (Milestone 5.1 Gradle task)
      shell: bash -l {0}
      run: ./gradlew pythonLint --stacktrace
      continue-on-error: true
      
    - name: Run code quality checks (Milestone 5.1 Gradle task)
      shell: bash -l {0}
      run: ./gradlew codeQuality --stacktrace
      continue-on-error: true
      
    - name: Upload Python test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          PythonApp/htmlcov/
          PythonApp/.coverage
        retention-days: 7

  # Build Validation Job (Milestone 5.1 Integration)
  build-validation:
    name: Build System Validation
    runs-on: windows-latest
    needs: [android-build-test, python-build-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        environment-file: environment.yml
        activate-environment: ${{ env.CONDA_ENV_NAME }}
        
    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ~/conda_pkgs_dir
          ~/.conda/envs/${{ env.CONDA_ENV_NAME }}
        key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-
        
    - name: Run enhanced setup script (Milestone 5.1)
      shell: powershell
      run: .\setup_dev_env.ps1 -SkipValidation:$false -Verbose
      
    - name: Test assembleAll task (Milestone 5.1)
      shell: bash -l {0}
      run: ./gradlew assembleAll --stacktrace
      
    - name: Test buildRelease task (Milestone 5.1)
      shell: bash -l {0}
      run: ./gradlew buildRelease --stacktrace
      
    - name: Upload build validation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-validation-results
        path: |
          build/reports/
          AndroidApp/build/reports/
        retention-days: 7

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: android-build-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Release Job (Milestone 5.2 - Enhanced with Python packaging)
  release:
    name: Create Release
    runs-on: windows-latest
    needs: [android-integration-test, python-build-test, build-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        environment-file: environment.yml
        activate-environment: ${{ env.CONDA_ENV_NAME }}
        
    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ~/conda_pkgs_dir
          ~/.conda/envs/${{ env.CONDA_ENV_NAME }}
        key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-
      
    - name: Build release versions (Milestone 5.1 task)
      shell: bash -l {0}
      run: ./gradlew buildRelease --stacktrace
      
    - name: Package Python application (Milestone 5.1 task)
      shell: bash -l {0}
      run: ./gradlew pythonPackage --stacktrace
      
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      if: env.KEYSTORE_FILE != ''
      with:
        releaseDirectory: AndroidApp/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        
    - name: Create GitHub Release (Milestone 5.2 - Multi-platform)
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          AndroidApp/build/outputs/apk/release/*.apk
          PythonApp/dist/*.exe
        body: |
          ## Milestone 5 Release - Build Automation & CI/CD
          
          This release includes both Android and Python applications built using the enhanced build automation system.
          
          ### 📱 Android Application
          - **APK**: Multi-sensor recording system for Android devices
          - Built with Gradle automation tasks
          - Includes thermal imaging and sensor integration
          
          ### 🖥️ Python Desktop Application  
          - **Executable**: Windows desktop application for data analysis
          - Built with conda environment and PyInstaller
          - Includes GUI for thermal data visualization and calibration
          
          ### 🔧 Build Information
          - **Build System**: Gradle with assembleAll automation
          - **Environment**: Conda-based Python dependencies
          - **CI/CD**: GitHub Actions with matrix builds
          - **Build Number**: ${{ github.run_number }}
          - **Commit**: ${{ github.sha }}
          
          ### 📋 Setup Instructions
          1. Download the APK for Android installation
          2. Download the EXE for Windows desktop use
          3. See README.md for detailed setup instructions
          4. Use setup_dev_env.ps1 for development environment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
