# Industry-Standard CI/CD Pipeline
# ===============================  
# Multi-platform CI/CD with modern tooling, comprehensive testing, and quality gates

name: CI/CD Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]
  workflow_dispatch:
  schedule:
    # Run weekly dependency checks
    - cron: '0 6 * * 1'

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4 -Dorg.gradle.parallel=true
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.9'
  CONDA_ENV_NAME: 'thermal-env'
  # Performance and caching optimizations
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

jobs:
  # Path-based job filtering for optimization
  changes:
    runs-on: ubuntu-latest
    outputs:
      android: ${{ steps.changes.outputs.android }}
      python: ${{ steps.changes.outputs.python }}
      docs: ${{ steps.changes.outputs.docs }}
      gradle: ${{ steps.changes.outputs.gradle }}
      ci: ${{ steps.changes.outputs.ci }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            android:
              - 'AndroidApp/**'
              - 'gradle/libs.versions.toml'
              - '*.gradle'
              - '*.gradle.kts'
            python:
              - 'PythonApp/**'
              - 'environment.yml'
              - 'test-requirements.txt'
              - 'pytest.ini'
            docs:
              - 'docs/**'
              - 'README.md'
              - '**/*.md'
            gradle:
              - 'build.gradle'
              - 'settings.gradle'
              - 'gradle/**'
              - 'gradlew*'
            ci:
              - '.github/workflows/**'
              - 'qodana.yaml'

  # Android Build and Test Job - Enhanced with latest tools
  android-build-test:
    name: Android Build & Test
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.android == 'true' || needs.changes.outputs.gradle == 'true' || github.event_name == 'workflow_dispatch' }}
    
    strategy:
      matrix:
        java-version: ['17', '21']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarQube analysis
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-disabled: false
        cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}
        build-scan-publish: true
        build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
        build-scan-terms-of-use-agree: "yes"
        
    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v3
      
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Cache Android SDK
      uses: actions/cache@v4
      with:
        path: |
          ~/.android/build-cache
          ~/.android/avd/*
          ~/.android/adb*
        key: android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          android-${{ runner.os }}-
          
    - name: Build Android project
      run: ./gradlew AndroidApp:assembleDebug --stacktrace --scan
      
    - name: Run Android unit tests for all variants
      run: |
        echo "Running comprehensive unit tests for all Android variants..."
        ./gradlew AndroidApp:test --stacktrace --continue
        echo "Running specific variant tests for coverage..."
        ./gradlew AndroidApp:testDevDebugUnitTest --stacktrace
        ./gradlew AndroidApp:testProdDebugUnitTest --stacktrace
      
    - name: Run Android lint
      run: ./gradlew AndroidApp:lintDebug --stacktrace
      
    - name: Generate test reports
      uses: dorny/test-reporter@v1.9.1
      if: success() || failure()
      with:
        name: Android Unit Tests - JDK ${{ matrix.java-version }}
        path: AndroidApp/build/test-results/**/TEST-*.xml
        reporter: java-junit
        fail-on-error: false
        
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-build-artifacts-jdk${{ matrix.java-version }}
        path: |
          AndroidApp/build/outputs/apk/debug/*.apk
          AndroidApp/build/reports/
        retention-days: 14
        compression-level: 6

  # Android Integration Test Job - Enhanced with latest emulator
  android-integration-test:
    name: Android Integration Tests
    runs-on: ubuntu-latest
    needs: android-build-test
    
    strategy:
      matrix:
        api-level: [29, 33]
        target: [default, google_apis]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-disabled: false
        cache-read-only: true
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
      
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}-${{ matrix.target }}

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
        
    - name: Run Android instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: ./gradlew AndroidApp:connectedDebugAndroidTest --stacktrace
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-integration-test-results-api${{ matrix.api-level }}-${{ matrix.target }}
        path: AndroidApp/build/reports/androidTests/connected/
        retention-days: 14

  # Python Build and Test Job - Enhanced with latest conda and testing tools  
  python-build-test:
    name: Python Build & Test
    runs-on: ${{ matrix.os }}
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' || needs.changes.outputs.ci == 'true' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for efficiency - test edge cases on Ubuntu only
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.10'
      fail-fast: false
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        environment-file: environment.yml
        activate-environment: ${{ env.CONDA_ENV_NAME }}
        miniforge-version: latest
        use-mamba: true  # Use mamba for faster dependency resolution
        
    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ~/conda_pkgs_dir
          ~/.conda/envs/${{ env.CONDA_ENV_NAME }}
        key: ${{ runner.os }}-conda-py${{ matrix.python-version }}-${{ hashFiles('environment.yml', 'test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-conda-py${{ matrix.python-version }}-
          ${{ runner.os }}-conda-
        
    - name: Set up JDK ${{ env.JAVA_VERSION }} (for Gradle integration)
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Gradle (for Python integration tests)
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-disabled: false
        cache-read-only: true
        
    - name: Grant execute permission for gradlew (Unix)
      if: runner.os != 'Windows'
      run: chmod +x gradlew
      
    - name: Verify conda environment
      shell: bash -l {0}
      run: |
        conda info
        conda list
        python --version
        which python
        pip --version
        
    - name: Install enhanced test dependencies
      shell: bash -l {0}
      run: |
        pip install --upgrade pip
        pip install -r test-requirements.txt
        pip install coverage[toml] pytest-benchmark pytest-xdist pytest-html bandit safety

    - name: Run Python linting and code quality
      shell: bash -l {0}
      run: |
        echo "Running comprehensive Python code quality checks..."
        cd PythonApp
        
        # Code formatting check
        python -m black --check --diff src/ || echo "Black formatting issues found"
        
        # Linting with flake8
        python -m flake8 src/ --max-line-length=88 --extend-ignore=E203,W503 || echo "Flake8 issues found"
        
        # Type checking with mypy
        python -m mypy src/ --ignore-missing-imports || echo "MyPy type issues found"
        
        # Security scanning
        python -m bandit -r src/ -f json -o ../bandit-report.json || echo "Security issues found"
        
        # Dependency vulnerability scanning
        python -m safety check --json --output ../safety-report.json || echo "Dependency vulnerabilities found"
      continue-on-error: true

    - name: Run Python tests with comprehensive coverage
      shell: bash -l {0}
      run: |
        cd PythonApp
        echo "Running comprehensive Python tests with coverage and performance benchmarks..."
        
        # Run tests with coverage, parallel execution, and HTML reports
        python -m pytest \
          --cov=src \
          --cov-report=html:htmlcov \
          --cov-report=xml:coverage.xml \
          --cov-report=term-missing \
          --cov-fail-under=50 \
          --junitxml=junit.xml \
          --html=pytest-report.html \
          --self-contained-html \
          -n auto \
          --benchmark-only \
          --benchmark-json=../benchmark-results.json \
          tests/ || echo "Some tests failed"

    - name: Run integration tests via Gradle
      shell: bash -l {0}
      run: |
        echo "Running Gradle-integrated Python tests..."
        ./gradlew pythonTest --stacktrace || echo "Gradle Python tests completed with issues"
        ./gradlew pythonLint --stacktrace || echo "Gradle Python linting completed with issues"
      continue-on-error: true
      
    - name: Upload Python test results and coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          PythonApp/htmlcov/
          PythonApp/coverage.xml
          PythonApp/junit.xml
          PythonApp/pytest-report.html
          bandit-report.json
          safety-report.json
          benchmark-results.json
        retention-days: 14
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        file: ./PythonApp/coverage.xml
        flags: python
        name: codecov-python
        fail_ci_if_error: false

  # Performance Monitoring and Benchmarking
  performance-monitoring:
    name: Performance Analysis & Benchmarks
    runs-on: ubuntu-latest
    needs: [android-build-test, python-build-test]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        build-scan-publish: true
        build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
        build-scan-terms-of-use-agree: "yes"
        
    - name: Set up Miniconda for performance tests
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        environment-file: environment.yml
        activate-environment: ${{ env.CONDA_ENV_NAME }}
        use-mamba: true
        
    - name: Install performance testing tools
      shell: bash -l {0}
      run: |
        pip install --upgrade pip
        pip install pytest-benchmark memory-profiler psutil
        
    - name: Run Android build performance analysis
      run: |
        echo "Running Android build performance analysis..."
        chmod +x gradlew
        
        # Measure build performance
        time ./gradlew AndroidApp:assembleDebug --profile --scan
        time ./gradlew AndroidApp:assembleRelease --profile --scan
        
        # Generate build performance report
        echo "Build performance metrics generated in build/reports/profile/"
        
    - name: Run Python performance benchmarks
      shell: bash -l {0}
      run: |
        cd PythonApp
        echo "Running Python performance benchmarks..."
        
        # Run performance benchmarks
        python -m pytest --benchmark-only --benchmark-json=../python-benchmarks.json tests/ || true
        
        # Memory profiling for critical components
        python -m memory_profiler src/main.py || true
        
    - name: Generate performance dashboard
      shell: bash -l {0}
      run: |
        echo "Generating performance summary dashboard..."
        python3 << 'EOF'
        import json
        import os
        from datetime import datetime

        # Create performance summary
        performance_data = {
            "timestamp": datetime.now().isoformat(),
            "commit": os.environ.get("GITHUB_SHA", "unknown"),
            "branch": os.environ.get("GITHUB_REF_NAME", "unknown"),
            "build_metrics": {},
            "python_benchmarks": {}
        }

        # Load Python benchmarks if available
        try:
            with open("python-benchmarks.json", "r") as f:
                performance_data["python_benchmarks"] = json.load(f)
        except FileNotFoundError:
            performance_data["python_benchmarks"] = {"status": "no_benchmarks_found"}

        # Save performance summary
        with open("performance-summary.json", "w") as f:
            json.dump(performance_data, f, indent=2)

        print("Performance summary generated!")
        EOF
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-analysis-results
        path: |
          build/reports/profile/
          python-benchmarks.json
          performance-summary.json
        retention-days: 30
        
    - name: Performance regression check
      run: |
        echo "Checking for performance regressions..."
        # This can be enhanced with historical performance data comparison
        echo "Performance baseline comparison would go here"
        echo "Consider integrating with tools like hyperfine or criterion for more sophisticated analysis"
  # Build System Validation & Integration Testing
  build-validation:
    name: Build System Validation
    runs-on: ${{ matrix.os }}
    needs: [android-build-test, python-build-test]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        environment-file: environment.yml
        activate-environment: ${{ env.CONDA_ENV_NAME }}
        use-mamba: true
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        build-scan-publish: true
        build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
        build-scan-terms-of-use-agree: "yes"
        
    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ~/conda_pkgs_dir
          ~/.conda/envs/${{ env.CONDA_ENV_NAME }}
        key: ${{ runner.os }}-conda-validation-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-
        
    - name: Grant execute permission for gradlew (Unix)
      if: runner.os != 'Windows'
      run: chmod +x gradlew
        
    - name: Validate complete build system integration
      shell: bash -l {0}
      run: |
        echo "Testing complete build system integration..."
        
        # Test assembleAll task
        ./gradlew assembleAll --stacktrace --scan
        
        # Test build quality checks
        ./gradlew codeQuality --stacktrace || echo "Code quality issues detected"
        
        # Test release build process
        ./gradlew buildRelease --stacktrace
        
    - name: Test cross-platform compatibility
      shell: bash -l {0}
      run: |
        echo "Testing cross-platform build compatibility on ${{ matrix.os }}..."
        
        # Verify Python environment setup
        python --version
        conda list --name ${{ env.CONDA_ENV_NAME }}
        
        # Test Python packaging
        cd PythonApp
        python -m pip install build wheel
        python -m build --wheel --outdir ../dist/ || echo "Python packaging test completed"
        
    - name: Upload build validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-validation-results-${{ matrix.os }}
        path: |
          build/reports/
          AndroidApp/build/reports/
          dist/
        retention-days: 14

  # Comprehensive Security Scanning Suite
  security-scan:
    name: Security & Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.android == 'true' || needs.changes.outputs.python == 'true' || needs.changes.outputs.ci == 'true' || github.event_name == 'schedule' }}
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for security analysis
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security scanning tools
      run: |
        pip install --upgrade pip
        pip install bandit safety semgrep
        
    # CodeQL Analysis for comprehensive SAST
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java, python
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Setup Gradle for CodeQL
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-disabled: true
        
    - name: Build for CodeQL analysis
      run: |
        chmod +x gradlew
        ./gradlew AndroidApp:assembleDebug --no-daemon
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:java"
        
    # Trivy Comprehensive Vulnerability Scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'
        
    # Python Security Scanning
    - name: Run Bandit Python security scan
      run: |
        bandit -r PythonApp/src/ -f sarif -o bandit-results.sarif || true
        
    - name: Upload Bandit results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'bandit-results.sarif'
        category: 'bandit'
        
    # Dependency Vulnerability Scanning
    - name: Run Safety dependency check
      run: |
        cd PythonApp
        safety check --json --output ../safety-results.json || true
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/gradle-jvm@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk-results.sarif
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk-results.sarif
        category: 'snyk'
        
    # Semgrep SAST Analysis
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/kotlin
          p/python
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        publishDeployment: ${{ github.ref_name }}
        generateSarif: "1"
        
    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        category: 'semgrep'
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          *.sarif
          *.json
        retention-days: 30

  # Enhanced Release Automation with Comprehensive Artifacts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [android-integration-test, python-build-test, build-validation, security-scan, performance-monitoring]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for changelog generation
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        environment-file: environment.yml
        activate-environment: ${{ env.CONDA_ENV_NAME }}
        use-mamba: true
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-disabled: false
        build-scan-publish: true
        build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
        build-scan-terms-of-use-agree: "yes"
        
    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ~/conda_pkgs_dir
          ~/.conda/envs/${{ env.CONDA_ENV_NAME }}
        key: ${{ runner.os }}-conda-release-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-
      
    - name: Generate release version
      id: version
      run: |
        # Generate semantic version based on commit count and date
        VERSION="v$(date +%Y.%m.%d).${GITHUB_RUN_NUMBER}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Build release versions
      shell: bash -l {0}
      run: |
        chmod +x gradlew
        echo "Building release versions..."
        ./gradlew buildRelease --stacktrace --scan
        
    - name: Package Python application
      shell: bash -l {0}
      run: |
        echo "Packaging Python application..."
        cd PythonApp
        pip install pyinstaller
        python -m PyInstaller src/main.py --onefile --windowed --name="ThermalRecordingSystem-${{ steps.version.outputs.version }}" || echo "PyInstaller packaging completed"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commit messages
        echo "## Changes in ${{ steps.version.outputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --pretty=format:"- %s (%h)" --since="1 day ago" >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Generated changelog for release"
        
    - name: Sign APK (if keystore available)
      uses: r0adkll/sign-android-release@v1
      if: env.KEYSTORE_FILE != ''
      with:
        releaseDirectory: AndroidApp/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        
    - name: Create comprehensive GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Multi-Sensor Recording System ${{ steps.version.outputs.version }}"
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          AndroidApp/build/outputs/apk/release/*.apk
          AndroidApp/build/outputs/apk/debug/*.apk
          PythonApp/dist/*.exe
          PythonApp/dist/*.whl
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ steps.version.outputs.version }}
        path: |
          AndroidApp/build/outputs/apk/
          PythonApp/dist/
          CHANGELOG.md
        retention-days: 90
